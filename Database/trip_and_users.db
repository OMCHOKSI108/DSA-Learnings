262. Trips and Users
Solved
Hard
Topics
premium lock icon
Companies
SQL Schema
Pandas Schema
Table: Trips

+-------------+----------+
| Column Name | Type     |
+-------------+----------+
| id          | int      |
| client_id   | int      |
| driver_id   | int      |
| city_id     | int      |
| status      | enum     |
| request_at  | varchar  |     
+-------------+----------+
id is the primary key (column with unique values) for this table.
The table holds all taxi trips. Each trip has a unique id, while client_id and driver_id are foreign keys to the users_id at the Users table.
Status is an ENUM (category) type of ('completed', 'cancelled_by_driver', 'cancelled_by_client').

Table: Users

+-------------+----------+
| Column Name | Type     |
+-------------+----------+
| users_id    | int      |
| banned      | enum     |
| role        | enum     |
+-------------+----------+
users_id is the primary key (column with unique values) for this table.
The table holds all users. Each user has a unique users_id, and role is an ENUM type of ('client', 'driver', 'partner').
banned is an ENUM (category) type of ('Yes', 'No').

The cancellation rate is computed by dividing the number of canceled (by client or driver) requests with unbanned users by the total number of requests with unbanned users on that day.

Write a solution to find the cancellation rate of requests with unbanned users (both client and driver must not be banned) each day between "2013-10-01" and "2013-10-03" with at least one trip. Round Cancellation Rate to two decimal points.

Return the result table in any order.

The result format is in the following example.

 

Example 1:

Input: 
Trips table:
+----+-----------+-----------+---------+---------------------+------------+
| id | client_id | driver_id | city_id | status              | request_at |
+----+-----------+-----------+---------+---------------------+------------+
| 1  | 1         | 10        | 1       | completed           | 2013-10-01 |
| 2  | 2         | 11        | 1       | cancelled_by_driver | 2013-10-01 |
| 3  | 3         | 12        | 6       | completed           | 2013-10-01 |
| 4  | 4         | 13        | 6       | cancelled_by_client | 2013-10-01 |
| 5  | 1         | 10        | 1       | completed           | 2013-10-02 |
| 6  | 2         | 11        | 6       | completed           | 2013-10-02 |
| 7  | 3         | 12        | 6       | completed           | 2013-10-02 |
| 8  | 2         | 12        | 12      | completed           | 2013-10-03 |
| 9  | 3         | 10        | 12      | completed           | 2013-10-03 |
| 10 | 4         | 13        | 12      | cancelled_by_driver | 2013-10-03 |
+----+-----------+-----------+---------+---------------------+------------+
Users table:
+----------+--------+--------+
| users_id | banned | role   |
+----------+--------+--------+
| 1        | No     | client |
| 2        | Yes    | client |
| 3        | No     | client |
| 4        | No     | client |
| 10       | No     | driver |
| 11       | No     | driver |
| 12       | No     | driver |
| 13       | No     | driver |
+----------+--------+--------+
Output: 
+------------+-------------------+
| Day        | Cancellation Rate |
+------------+-------------------+
| 2013-10-01 | 0.33              |
| 2013-10-02 | 0.00              |
| 2013-10-03 | 0.50              |
+------------+-------------------+
Explanation: 
On 2013-10-01:
  - There were 4 requests in total, 2 of which were canceled.
  - However, the request with Id=2 was made by a banned client (User_Id=2), so it is ignored in the calculation.
  - Hence there are 3 unbanned requests in total, 1 of which was canceled.
  - The Cancellation Rate is (1 / 3) = 0.33
On 2013-10-02:
  - There were 3 requests in total, 0 of which were canceled.
  - The request with Id=6 was made by a banned client, so it is ignored.
  - Hence there are 2 unbanned requests in total, 0 of which were canceled.
  - The Cancellation Rate is (0 / 2) = 0.00
On 2013-10-03:
  - There were 3 requests in total, 1 of which was canceled.
  - The request with Id=8 was made by a banned client, so it is ignored.
  - Hence there are 2 unbanned request in total, 1 of which were canceled.
  - The Cancellation Rate is (1 / 2) = 0.50


----------------------------------------------------------------------------------------------
Solution 
  
select t.Request_at Day,
       ROUND((count(IF(t.status!='completed',TRUE,null))/count(*)),2) as 'Cancellation Rate'
from Trips t where 
t.Client_Id in (Select Users_Id from Users where Banned='No') 
and t.Driver_Id in (Select Users_Id from Users where Banned='No')
and t.Request_at between '2013-10-01' and '2013-10-03'
group by t.Request_at;


----------------------------------------------------------------------------------------------------
### Explanation of the SQL Query

This SQL query calculates the daily cancellation rate for trips in a database (likely from a problem like LeetCode's "Trips and Users"). It focuses on trips between unbanned clients and drivers, within a specific date range (October 1-3, 2013). The query uses aggregation to compute rates per day, excluding banned users as per the problem's requirements.

Here's a breakdown of the query structure and logic:

1. **SELECT Clause**:
   - `t.Request_at Day`: Selects the request date as the "Day" column. This will be the grouping key.
   - `ROUND((count(IF(t.status!='completed',TRUE,null))/count(*)),2) as 'Cancellation Rate'`: Computes the cancellation rate.
     - `count(IF(t.status!='completed',TRUE,null))`: Counts rows where the status is not 'completed' (i.e., cancellations). The `IF` function returns `TRUE` (which `count` treats as 1) for non-completed statuses, or `NULL` (ignored by `count`) otherwise. This effectively counts cancellations.
     - `count(*)`: Counts all rows in the group (total trips for that day).
     - The ratio is rounded to 2 decimal places using `ROUND`.
     - **Gotcha**: The `IF` here is MySQL-specific (equivalent to `CASE` in standard SQL). It avoids summing booleans directly, ensuring only non-null values are counted. If statuses include values like 'cancelled_by_driver' or 'cancelled_by_client', they all count as cancellations since they're not 'completed'.

2. **FROM Clause**:
   - `from Trips t`: Queries the `Trips` table, aliased as `t` for brevity.

3. **WHERE Clause**:
   - `t.Client_Id in (Select Users_Id from Users where Banned='No')`: Filters trips to only those where the client is not banned. This is a subquery that checks the `Users` table.
   - `t.Driver_Id in (Select Users_Id from Users where Banned='No')`: Similarly, ensures the driver is not banned.
   - `t.Request_at between '2013-10-01' and '2013-10-03'`: Limits to the specified date range.
   - **Gotcha**: These subqueries use `IN`, which can be inefficient for large tables (better as JOINs in some cases). Also, assumes `Users_Id` is the primary key in `Users` and foreign keys in `Trips`. If a user is banned, all their trips are excluded, even if the other party is unbanned.

4. **GROUP BY Clause**:
   - `group by t.Request_at`: Groups results by the request date, so one row per day with the aggregated cancellation rate.

**Underlying Principles**:
- **Aggregation**: The query leverages SQL's grouping and counting to summarize data. It's efficient for this problem but assumes the `Trips` table has columns like `Request_at`, `Status`, `Client_Id`, and `Driver_Id`.
- **Filtering with Subqueries**: Ensures only valid (unbanned) participants are considered, preventing skewed rates.
- **Performance Note**: For large datasets, consider indexing on `Request_at`, `Client_Id`, and `Driver_Id`. The subqueries might benefit from being rewritten as JOINs for better optimization.
- **Example Output**: Based on the problem description, for 2013-10-01, it would show 0.00 (0 cancellations out of 2 unbanned trips); for 2013-10-03, 0.50 (1 out of 2).

If this is in a file like `trip_and_users.sql`, you can run it in a MySQL environment (e.g., via VS Code's integrated terminal with `mysql` command). For improvements, consider using `CASE` instead of `IF` for broader SQL compatibility. If you have errors or need modifications, provide more details!