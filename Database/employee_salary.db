181. Employees Earning More Than Their Managers
Easy
Topics
premium lock icon
Companies
SQL Schema
Pandas Schema
Table: Employee

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| id          | int     |
| name        | varchar |
| salary      | int     |
| managerId   | int     |
+-------------+---------+
id is the primary key (column with unique values) for this table.
Each row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.
 

Write a solution to find the employees who earn more than their managers.

Return the result table in any order.

The result format is in the following example.

 

Example 1:

Input: 
Employee table:
+----+-------+--------+-----------+
| id | name  | salary | managerId |
+----+-------+--------+-----------+
| 1  | Joe   | 70000  | 3         |
| 2  | Henry | 80000  | 4         |
| 3  | Sam   | 60000  | Null      |
| 4  | Max   | 90000  | Null      |
+----+-------+--------+-----------+
Output: 
+----------+
| Employee |
+----------+
| Joe      |
+----------+
Explanation: Joe is the only employee who earns more than his manager.

---------------------------------------------------------------------------------
code:
# Write your MySQL query statement below
SELECT e1.name as Employee FROM Employee e1 
INNER JOIN Employee e2 ON e1.managerId = e2.id
WHERE e1.salary > e2.salary

**Step-by-step breakdown:**

1. **Self-join setup:**
   - `e1` = Employee records (the employees we're checking)
   - `e2` = Manager records (their managers)

2. **JOIN condition:** `e1.managerId = e2.id`
   - Links each employee to their manager
   - Only employees with managers will be included (INNER JOIN filters out NULL managerIds)

3. **WHERE condition:** `e1.salary > e2.salary`
   - Filters for employees earning more than their managers

## Tracing Through the Example

```
Employee table:
+----+-------+--------+-----------+
| id | name  | salary | managerId |
+----+-------+--------+-----------+
| 1  | Joe   | 70000  | 3         |
| 2  | Henry | 80000  | 4         |
| 3  | Sam   | 60000  | NULL      |
| 4  | Max   | 90000  | NULL      |
+----+-------+--------+-----------+
```

**After JOIN:**
- Joe (e1: id=1, salary=70000) → Sam (e2: id=3, salary=60000) ✓
- Henry (e1: id=2, salary=80000) → Max (e2: id=4, salary=90000) ✗
- Sam and Max have NULL managerIds → Not included in INNER JOIN

**After WHERE filter:**
- Joe: 70000 > 60000 ✓ → Included
- Henry: 80000 > 90000 ✗ → Excluded

**Result:** Only "Joe" is returned, which matches the expected output.

## Why This Approach is Optimal

 **Correct logic** - Properly joins employees with their managers  
 **Handles NULLs** - INNER JOIN automatically excludes employees without managers  
 **Efficient** - Single pass with one JOIN condition  
 **Clear and readable** - Self-documenting code structure  

